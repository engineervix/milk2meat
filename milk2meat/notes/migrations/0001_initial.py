# Generated by Django 5.1.7 on 2025-03-22 14:11

import uuid

import django.db.models.deletion
import taggit.managers
from django.db import migrations, models
from upload_validator import FileTypeValidator

import milk2meat.notes.models
from milk2meat.core.utils.validators import FileSizeValidator


class Migration(migrations.Migration):
    dependencies = [
        ("users", "0001_initial"),  # Assuming you have a users app migration
        ("taggit", "0005_auto_20220424_2025"),  # Make sure this matches your taggit version
    ]

    # Define the models in state_operations
    state_operations = [
        migrations.CreateModel(
            name="NoteType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=50, unique=True)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
                "db_table": "core_notetype",  # Keep the old table name
            },
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=255)),
                ("content", models.TextField(blank=True)),
                (
                    "upload",
                    models.FileField(
                        blank=True,
                        help_text="You could upload handwritten notes from iPad as PDF or image",
                        null=True,
                        upload_to=milk2meat.notes.models.user_note_upload_path,
                        validators=[
                            FileTypeValidator(
                                allowed_types=[
                                    "image/jpeg",
                                    "image/png",
                                    "image/gif",
                                    "image/webp",
                                    "application/pdf",
                                    "application/msword",
                                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                ]
                            ),
                            FileSizeValidator(),
                        ],
                    ),
                ),
                (
                    "note_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="notes", to="notes.notetype"
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="notes", to="users.user"
                    ),
                ),
                # We'll create a separate migration for the M2M relationship with books
                # to avoid circular dependencies
                # ("referenced_books", models.ManyToManyField(blank=True, related_name="notes", to="bible.book")),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="core.UUIDTaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at", "-created_at"],
                "db_table": "core_note",  # Keep the old table name
            },
        ),
        migrations.AddConstraint(
            model_name="note",
            constraint=models.UniqueConstraint(fields=("slug", "owner"), name="unique_owner_slug"),
        ),
    ]

    operations = [
        # Use SeparateDatabaseAndState to tell Django we don't want to create the tables,
        # just update the state in the Django ORM
        migrations.SeparateDatabaseAndState(
            state_operations=state_operations,
        ),
    ]
